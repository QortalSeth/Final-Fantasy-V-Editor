import store from '../redux/store';
import { byteSelector, setOffset } from '../redux/slices/ROM-Slice';

// prettier-ignore
const textMap = new Map<number, (char: string) => string>([
  [0x1, () => { return '\n';  } ],
  [0x2, () => { return 'Bartz';  } ],
  [0x20, () => { return 'A ';  } ],
  [0x21, () => { return 'B ';  } ],
  [0x22, () => { return 'C ';  } ],
  [0x23, () => { return 'D ';  } ],
  [0x24, () => { return 'E ';  } ],
  [0x25, () => { return 'F ';  } ],
  [0x26, () => { return 'G ';  } ],
  [0x27, () => { return 'H ';  } ],
  [0x28, () => { return 'I ';  } ],
  [0x29, () => { return 'J ';  } ],
  [0x2A, () => { return 'K ';  } ],
  [0x2B, () => { return 'L ';  } ],
  [0x2C, () => { return 'M ';  } ],
  [0x2D, () => { return 'N ';  } ],
  [0x2E, () => { return 'O ';  } ],
  [0x2F, () => { return 'P ';  } ],
  [0x30, () => { return 'Q ';  } ],
  [0x31, () => { return 'R ';  } ],
  [0x32, () => { return 'S ';  } ],
  [0x33, () => { return 'T ';  } ],
  [0x34, () => { return 'U ';  } ],
  [0x35, () => { return 'V ';  } ],
  [0x36, () => { return 'W ';  } ],
  [0x37, () => { return 'X ';  } ],
  [0x38, () => { return 'Y ';  } ],
  [0x39, () => { return 'Z ';  } ],
  [0x53, () => { return '0';  } ],
  [0x54, () => { return '1';  } ],
  [0x55, () => { return '2';  } ],
  [0x56, () => { return '3';  } ],
  [0x57, () => { return '4';  } ],
  [0x58, () => { return '5';  } ],
  [0x59, () => { return '6';  } ],
  [0x5A, () => { return '7';  } ],
  [0x5B, () => { return '8';  } ],
  [0x5C, () => { return '9';  } ],
  [0x60, () => { return 'A';  } ],
  [0x61, () => { return 'B';  } ],
  [0x62, () => { return 'C';  } ],
  [0x63, () => { return 'D';  } ],
  [0x64, () => { return 'E';  } ],
  [0x65, () => { return 'F';  } ],
  [0x66, () => { return 'G';  } ],
  [0x67, () => { return 'H';  } ],
  [0x68, () => { return 'I';  } ],
  [0x69, () => { return 'J';  } ],
  [0x6A, () => { return 'K';  } ],
  [0x6B, () => { return 'L';  } ],
  [0x6C, () => { return 'M';  } ],
  [0x6D, () => { return 'N';  } ],
  [0x6E, () => { return 'O';  } ],
  [0x6F, () => { return 'P';  } ],
  [0x70, () => { return 'Q';  } ],
  [0x71, () => { return 'R';  } ],
  [0x72, () => { return 'S';  } ],
  [0x73, () => { return 'T';  } ],
  [0x74, () => { return 'U';  } ],
  [0x75, () => { return 'V';  } ],
  [0x76, () => { return 'W';  } ],
  [0x77, () => { return 'X';  } ],
  [0x78, () => { return 'Y';  } ],
  [0x79, () => { return 'Z';  } ],
  [0x7A, () => { return 'a';  } ],
  [0x7B, () => { return 'b';  } ],
  [0x7C, () => { return 'c';  } ],
  [0x7D, () => { return 'd';  } ],
  [0x7E, () => { return 'e';  } ],
  [0x7F, () => { return 'f';  } ],
  [0x80, () => { return 'g';  } ],
  [0x81, () => { return 'h';  } ],
  [0x82, () => { return 'i';  } ],
  [0x83, () => { return 'j';  } ],
  [0x84, () => { return 'k';  } ],
  [0x85, () => { return 'l';  } ],
  [0x86, () => { return 'm';  } ],
  [0x87, () => { return 'n';  } ],
  [0x88, () => { return 'o';  } ],
  [0x89, () => { return 'p';  } ],
  [0x8A, () => { return 'q';  } ],
  [0x8B, () => { return 'r';  } ],
  [0x8C, () => { return 's';  } ],
  [0x8D, () => { return 't';  } ],
  [0x8E, () => { return 'u';  } ],
  [0x8F, () => { return 'v';  } ],
  [0x90, () => { return 'w';  } ],
  [0x91, () => { return 'x';  } ],
  [0x92, () => { return 'y';  } ],
  [0x93, () => { return 'z';  } ],
  [0x94, () => { return 'il';  } ],
  [0x95, () => { return 'it';  } ],
  [0x97, () => { return 'li';  } ],
  [0x98, () => { return 'll';  } ],
  [0x99, () => { return '\'';  } ],
  [0x9B, () => { return ':';  } ],
  [0x9D, () => { return ',';  } ],
  [0x9E, () => { return '(';  } ],
  [0x9F, () => { return ')';  } ],
  [0xA0, () => { return '/';  } ],
  [0xA1, () => { return '!';  } ],
  [0xA2, () => { return '?';  } ],
  [0xA3, () => { return '.';  } ],
  [0xA4, () => { return 'ti';  } ],
  [0xA5, () => { return 'fi';  } ],
  [0xAC, () => { return 'if';  } ],
  [0xAD, () => { return 'It';  } ],
  [0xAE, () => { return 'tl';  } ],
  [0xAF, () => { return 'ir';  } ],
  [0xB0, () => { return 'tt';  } ],
  [0xBC, () => { return 'KEY';  } ],
  [0xBD, () => { return 'SHOE';  } ],
  [0xBE, () => { return 'MISC';  } ],
  [0xBF, () => { return 'HAMR';  } ],
  [0xC0, () => { return 'TENT';  } ],
  [0xC1, () => { return 'RIBN';  } ],
  [0xC2, () => { return 'DRNK';  } ],
  [0xC3, () => { return 'SUIT';  } ],
  [0xC4, () => { return 'SONG';  } ],
  [0xC5, () => { return '-';  } ],
  [0xC6, () => { return 'SHUR';  } ],
  [0xC7, () => { return '...';  } ],
  [0xC8, () => { return 'SCRL';  } ],
  [0xC9, () => { return '!';  } ],
  [0xCA, () => { return 'CLAW';  } ],
  [0xCB, () => { return '?';  } ],
  [0xCC, () => { return 'GLOV';  } ],
  [0xCD, () => { return '%';  } ],
  [0xCE, () => { return '/';  } ],
  [0xCF, () => { return ':';  } ],
  [0xD0, () => { return '|-';  } ],
  [0xD1, () => { return ' |';  } ],
  [0xE0, () => { return '/\\';  } ],
  [0xE1, () => { return '-}';  } ],
  [0xE2, () => { return '+';  } ],
  [0xE3, () => { return 'SWRD';  } ],
  [0xE4, () => { return 'WHIT';  } ],
  [0xE5, () => { return 'BLAK';  } ],
  [0xE6, () => { return 'DIMN';  } ],
  [0xE7, () => { return 'KNIF';  } ],
  [0xE8, () => { return 'SPER';  } ],
  [0xE9, () => { return 'AXE';  } ],
  [0xEA, () => { return 'KATN';  } ],
  [0xEB, () => { return 'ROD';  } ],
  [0xEC, () => { return 'STAF';  } ],
  [0xED, () => { return 'BOW';  } ],
  [0xEE, () => { return 'HARP';  } ],
  [0xEF, () => { return 'WHIP';  } ],
  [0xF0, () => { return 'BELL';  } ],
  [0xF1, () => { return 'SHLD';  } ],
  [0xF2, () => { return 'HELM';  } ],
  [0xF3, () => { return 'ARMR';  } ],
  [0xF4, () => { return 'RING';  } ],
]);

export const textReader = (pointer: number) => {
  let text = '';
  let readNextByte = true;
  let nextByte: number;
  setOffset(pointer);
  let textLength = 0;

  const sizeLimit = 1000;
  while (readNextByte) {
    nextByte = byteSelector(store.getState);
    textLength += 1;
    if (textLength > sizeLimit) {
      readNextByte = false;
    }

    if (nextByte === 0xff) {
      readNextByte = false;
    } else {
      text += textMap.get(nextByte);
    }
  }

  return text;
};

export default textReader;
